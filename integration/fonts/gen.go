// This program is based on the following script: https://cs.opensource.google/go/x/image/+/master:font/gofont/gen.go

//go:build ignore
// +build ignore

package main

// This program generates a single package file that contains "go:embed"
// directives for embedding font TTF files into a package.
//
// Currently, "go run gen.go" needs to be run manually. This isn't done by the
// usual "go generate" mechanism as there isn't any other Go code in this
// directory (excluding sub-directories) to attach a "go:generate" line to.
//
// In any case, code generation should only need to happen when the underlying
// TTF files change, which isn't expected to happen frequently.
//
// Usage is as follows:
// Create a new package adjacent to this program named after the font name. Say
// your font name is "Lato", and the files are "Lato-Regular.ttf" and
// "Lato-Bold.ttf", name your package "lato". Put your TTF files into a directory
// called "ttfs" within the package. With the new package as your terminal's CWD,
// run "go run ../gen.go" to generate a file called "data.go" that looks like the
// one found in the already existing "roboto" package.

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const suffix = ".ttf"

var final *bytes.Buffer = nil

func main() {
	ttfs, err := os.Open("ttfs")
	if err != nil {
		log.Fatal(err)
	}
	defer ttfs.Close()

	infos, err := ttfs.Readdir(-1)
	if err != nil {
		log.Fatal(err)
	}
	for _, info := range infos {
		ttfName := info.Name()
		if !strings.HasSuffix(ttfName, suffix) {
			continue
		}
		do(ttfName)
	}
}

func do(ttfName string) {
	fontName := fontName(ttfName)
	pkgName := pkgName(ttfName)
	varName := varName(ttfName)

	if final == nil {
		final = new(bytes.Buffer)
	}

	if !strings.ContainsAny(final.String(), "generated by") {
		fmt.Fprintf(final, "// generated by go run gen.go; DO NOT EDIT\n\n")
		fmt.Fprintf(final, "// Package %s provides the %q TrueType font\n", pkgName, strings.Split(fontName, " ")[0])
		fmt.Fprintf(final, "package %s\n\nimport _ \"embed\"\n", pkgName)
	}

	fmt.Fprintf(final, "//go:embed ttfs/%s\nvar %s []byte\n\n", ttfName, varName)

	dst, err := format.Source(final.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	if err := ioutil.WriteFile(filepath.Join("data.go"), dst, 0666); err != nil {
		log.Fatal(err)
	}
}

// fontName maps "Roboto-Regular.ttf" to "Roboto Regular".
func fontName(ttfName string) string {
	s := ttfName[:len(ttfName)-len(suffix)]
	s = strings.Replace(s, "-", " ", -1)
	return s
}

// pkgName maps "Roboto-Regular.ttf" to "roboto".
func pkgName(ttfName string) string {
	s := ttfName[:len(ttfName)-len(suffix)]
	s = strings.Split(s, "-")[0]
	s = strings.ToLower(s)
	return s
}

// varName maps "Roboto-Regular.ttf" to "RobotoRegular"
func varName(ttfName string) string {
	s := ttfName[:len(ttfName)-len(suffix)]
	s = strings.Replace(s, "-", "", -1)
	return s
}
